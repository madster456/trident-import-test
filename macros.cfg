#############################################################
#                       G32
#############################################################

[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_BASE
gcode:
    Z_TILT_ADJUST_BASE RETRY_TOLERANCE=0.0075
    Z_TILT_ADJUST_BASE HORIZONTAL_MOVE_Z=2

    

[gcode_macro G32]
gcode:
       
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    led_qgl
    Z_TILT_ADJUST         
    G28
    RESTORE_GCODE_STATE NAME=STATE_G32


############################################################
#                     Print Start
############################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice

gcode:
 # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

 CLEAR_TEMPERATURE_LED LED=chamber
 

 M190 S115 #bed to 115

 BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0

  led_homing
  G28 METHOD=PROXIMITY

  G28 Z METHOD=CONTACT CALIBRATE=0                  # Full home (XYZ)
  
  G90                   # Absolute position
  
 G0 Z2   ; position beacon at 2mm for heat soak

  led_busy
  SET_FAN_SPEED FAN=bedfans SPEED=0.20
  RESPOND MSG="Heating bed to temp for soak: 115c"           # Displays info
  M190 S115 #bed to 115
  #M106 S255 # Turns on the PT-fan
  RESPOND MSG="Waiting for chamber to reach (on Chamber): {chambertemp}c"           # Displays info
  TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}   # Waits for chamber to reach desired temp

  RESPOND MSG="Bed  target temp: {bedtemp}c"           # Displays info
  M190 S{bedtemp}   
  
    
    # SET_TEMPERATURE_LED
    #M190 S{bedtemp}
    # M109 S150
    # TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}
    
    
    #CLEAR_TEMPERATURE_LED
    led_ready
    
     # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    RESPOND MSG="Hotend: 150c"          # Displays info
    M109 S150                                    # Heats the nozzle to 150c

    
    led_qgl
    G28 Z METHOD=CONTACT CALIBRATE=1
    
    Z_TILT_ADJUST
    #led_homing
    G28 Z
    #G32                            ; home all axes
    G90                            ; absolute positioning
    #led_busy                          
    #G1 Z20 F3000                   ; move nozzle away from bed
    led_bed_mesh
    BED_MESH_CALIBRATE ADAPTIVE=1 RUNS=2

    G28 Z METHOD=CONTACT CALIBRATE=0
    led_busy
    M104 S{hotendtemp}                    ; set extruder to print temp
    M109 S{hotendtemp}                    ; wait for extruder temp

    SET_GCODE_OFFSET Z=0.120
  
    #led_clean
    #clean_nozzle
    #led_clean
    #LINE_PURGE
    SET_FAN_SPEED FAN=bedfans SPEED=0.85
    led_print
    PRIME_LINE
     
    #Status_Busy

############################################################
#                     Print End
############################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS

    SET_FAN_SPEED FAN=exhaust_fan SPEED=1     ; crank exhaust fan to 100% to evacuate chamber        

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    G91
    G1 Z+100 F1500                           ; Lower Build Plate for easier removal and access
    G90
    
    BED_MESH_CLEAR

    UPDATE_DELAYED_GCODE ID=exhaust_off DURATION=120                                     ; turn exhaust off in 2 min
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[delayed_gcode exhaust_off]
gcode:
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0
  SET_FAN_SPEED FAN=bed_blowers SPEED=0
  SET_FAN_SPEED FAN=bedfans SPEED=0

    led_ready

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#########################################################################
#                               Prime line 
#########################################################################

#
# Parametric PRIME LINE macro.
# Most settings have sane defaults, but can be overridden with optional input parameters. None of  the input parameters are mandatory.
# Usage:
#    PRIME_LINE
#
# Full list of parameters, use none or any combination:
#    PRIME_LINE NOZZLE=0.4 XPAD=0 YPAD=0 LENGTH=150 PRINT_SPEED=30 TRAVEL_SPEED=200 PURGE=8 RETRACT=1 EXTRUSION_MULTIPLIER=1.25 PRINT_HANDLE=1 HANDLE_FAN=75
#
# Version 1.2
#
[gcode_macro PRIME_LINE]
description: Print an extruder priming line with optional purge and easy removal handle
gcode:
      led_print
    # settings
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to retract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,   # mm, length of the prime line
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(75)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 60   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}
    {% set nozzle_diameter = params.NOZZLE|default(printer.configfile.config['extruder'].nozzle_diameter|float)|float %}

    # sanity check and computed variables
    {% set max_x, max_y = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter / 2, 'length': [range(line.length-10,line.length+10)|random, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    {action_respond_info('Printing prime line')}
    M117 Prime Line
    G90 # absolute positioning
    G0 X{line.x_start} Y{line.y_start + (handle.width / 2)|int + 1} Z{line.height} F{line.travel_speed * 60} # move to starting position
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

 #####################################################################
#                         Load Filament
#####################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
  M109 S265
  M83    ; set extruder to relative
  M106 S255                       ; Partcooling fan to max
  G1 E70 F300                    ; load
  G1 E15 F150                    ; prime nozzle with filament
  M106 S0                         ; Partcooling fan to off
  M82                            ; set extruder to absolute
  STATUS_READY

#####################################################################
#                         Unload Filament
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
   M109 S265                       ; Set Extruder to 265°C  
   M83                            ; set extruder to relative
   G1 E5 F300                    ; extrude a little to soften tip
   G1 E-20 F2500                  ; jerk the filament out of the melt zone
   G1 E-50 F500                  ; retract the rest of the way
   M82                            ; set extruder to absolute


#####################################################################
#                         M600
#####################################################################

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 
    E-10 F1000
    RESTORE_GCODE_STATE NAME=M600_state
    #PURGE_LINE


#####################################################################
#   LED Control
#####################################################################

# ## Chamber Lighting - PB6 Connector 
# [neopixel chamber]
# pin: PB6
# chain_count:60
# #   The number of Neopixel chips that are "daisy chained" to the
# #   provided pin. The default is 1 (which indicates only a single
# #   Neopixel is connected to the pin).
# color_order: GRBW
# #   Set the pixel order required by the LED hardware. Options are GRB,
# #   RGB, GRBW, or RGBW. The default is GRB.
# initial_GREEN: 1.0
# initial_RED: 1.0
# initial_BLUE:1.0
# initial_WHITE: 1.0
# #   Sets the initial LED color of the Neopixel. Each value should be
# #   between 0.0 and 1.0. The WHITE option is

##########################################################################
#                             SpeedTest
##########################################################################

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

    # Absolute positioning
    G90
    
    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

  
    ##############################################################################
    # Pressure Advance calibration test.
    ##############################################################################

# The main reason for this test is that the standard tuning tower provides ambigious, open to interpretation readings with a broad margin for error.
# This test provides control values next to the values being tested, so differences are easier to notice at a glance.

# Prints a series of bands, 6 lines per each, with the first 3 lines printed slowly and used as baseline/control and the other 3
# at two different speeds in the following sequence: 25% at 40mm/sec, 50% at 120mm/sec, 25% at 40mm/sec.
# Pressure Advance value is being increased for every band starting from 0.01 with 0.002 increments.

# -------------------------------------------------------------------------------------------------------------------------
# If you want to use it into your own config, please install it as a standalone macro as described in the
# installation section of this file: docs > features > pa_calibration.md
# -------------------------------------------------------------------------------------------------------------------------

# The printed model should be inspected by looking at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change).
# Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities.
# Then the pressure advance value is calculated as follows:
#    PA = START + (INCREMENT * band_number)
# Which in case of using default values, would be:
#    PA = 0.01 + (0.002 * band_number)

# You might also want to repeat the test using a START value that is slightly less that your calculated PA value, and smaller INCREMENTs
# to narrow down and refine your PA value further.

# This macro is parametric and most of the values can be adjusted with their respective input parameters.
# It can be called without any input parameters - in which case the default values would be used - or with any combination of parameters as desired. 

# Make sure your axis are homed, your bed mesh is loaded (if you are using one) and both the hotend and the bed are at the temperature required for your filament.
# Usage:
#   PRESSURE_ADVANCE_CALIBRATION START=0.01 INCREMENT=0.002 RAFT=1

# Primary input parameters:
#    START       : default(0.02)   PA value to start with
#    INCREMENT   : default(0.005)  PA value to increment for each subsequent band
#    DO_RAFT     : default(1)      whether to print a raft or not. printing one makes the finished test east to remove from the bed
#    EXTRUSION_MULTIPLIER: default(1.25 if raft enabled, 1.5 if disabled)   extrusion multiplier to apply to printing lines in the band
# Other tunable parameters:
#    PRINT_SIZE    : default(120)    maximum width/height, in mm,  that the test can make use of. the model will be printed in the middle of the bed
#    BANDS_LIMIT   : default(999)    optionally the number of bands can be limited this way. otherwise as many bands that fit in the given SIZE will be printed
#    CONTROL_SPEED : default(30)     speed at which the control lines in a band are printed at, mm/sec
#    OUTER_SPEED   : default(40)     speed of printing the outer parts of the test lines in a band, mm/sec
#    INNER_SPEED   : default(80)     speed of printing the middle part of the test lines in a band, mm/sec
#    TRAVEL_SPEED  : default(200)    speed of travel moves, mm/sec
#    RAFT_SPEED    : default(80)     speed of printing the raft, if enabled, mm/sec
#    LINES_PER_BAND: default(6)    number of lines per band. half of these will be control, another half the test lines
#    RETRACT_LENGTH: default(0.6)  retraction, in mm, to perform when traveling   
#    PURGE_MM      : default(8)    purge this amount of mm of filament before starting the print
#    LINE_SPACING  : default(0.4)  spacing between individual lines in a band

# Play wround with enabling or disabling rafts, changing extrusion multiplier to get thicker lines where Pa changes would be easier to notice, or using
# OUTER and INNER speeds that are more realistic and closer to actual printing conditions: such as the speeds used for external and internal perimeters,
# or internal perimeters and infill. The default values for SLOW and FAST speeds are taken from Stephan's PIF profile for external and internal perimeters.

# @version: 1.2

# Based on the idea from a post by DonStauffer on https://forum.duet3d.com/topic/25161/my-pressure-advance-calibration

[gcode_macro PRESSURE_ADVANCE_CALIBRATION]
description: Calibrate the pressure advance by printing a grid pattern
gcode:
    # 
    # input and tunables
    #
    {% set pa_start     = params.START|default(0.02)|float %}       # starting PA value
    {% set pa_increment = params.INCREMENT|default(0.005)|float %}  # how much to increment PA per band

    {% set do_raft = params.DO_RAFT|default(1)|int %}  # whether to print a raft or not

    {% set print_size      = params.PRINT_SIZE|default(120)|int %}                # width/height of the printed test
    {% set num_bands       = params.BANDS_LIMIT|default(999)|int %}               # limit the number of bands to print. othwerwise print as many as would fit within a given size
    {% set lines_per_band  = params.LINES_PER_BAND|default(6)|int %}              # number of lines per band. half are control, another half the test
    {% set e_multiplier    = params.EXTRUSION_MULTIPLIER|default(1.25 if do_raft == 1 else 1.5)|float %},  # extrusion multiplier for line print moves
    {% set retract_length  = params.RETRACT_LENGTH|default(0.6)|float %}          # how much to retract when traveling between print moves
    {% set initial_purge   = params.PURGE_MM|default(8)|int %}                    # mm of filament to purge before printing. set to 0 to disable

    {% set feedrate_control = params.CONTROL_SPEED|default(30)|int * 60 %}  # print feedrate of the line in the middle of the band
    {% set feedrate_outer   = params.OUTER_SPEED|default(40)|int * 60 %}    # print feedrate of the lines on the sides of the band
    {% set feedrate_inner   = params.INNER_SPEED|default(120)|int * 60 %}   # print feedrate of the line in the middle of the band
    {% set feedrate_travel  = params.TRAVEL_SPEED|default(200)|int * 60 %}  # travel feedrate between print moves
    {% set feedrate_raft    = params.RAFT_SPEED|default(120)|int * 60 %}    # print feedrate for printing raft
    {% set feedrate_z       = 5 * 60 %}   # z axis travel feedrate
    {% set feedrate_retract = 50 * 60 %}  # retract and deretract feedrate

    {% set spacing_line  = params.LINE_SPACING|default(0.4)|float %}  # distance between lines in a band
    {% set spacing_band  = 2 %}                                       # distance between individual bands
    {% set spacing_raft  = 2 %}                                       # distance between raft lines

    {% set fast_line_ratio_percent = 50 %}
    # sanity check
    {% set lines_per_band    = [2, lines_per_band]|max %}
    {% set e_multiplier      = [1, e_multiplier]|max %}
    {% set num_lines_control = (lines_per_band / 2)|round(0, 'floor')|int %}
    {% set num_lines_test    = (lines_per_band / 2)|round(0, 'ceil')|int %}
    {% set spacing_line      = spacing_line * (1 + e_multiplier - 1.25) %}  # the higher the extrusion multiplier the wider the spacing
    # computed values
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set nozzle_diameter = printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set line_width    = nozzle_diameter * 1.25 %}
    {% set line_height   = nozzle_diameter / 2 %}
    {% set z_hop_height  = 2 * line_height %}
    {% set e_per_mm      = (line_width * line_height) / (3.1415 * (1.75/2)**2) %} 
    {% set spacing_purge = line_height * 0.8 %}  # distance between purge lines and raft
    # set print width to align with the raft grid
    {% set spacing_raft   = (spacing_raft / line_width)|round * line_width %}  # align raft spacing to multiples of line width
    {% set num_raft_lines = ([print_size, max_x]|min / spacing_raft)|round(0, 'floor')|int %}
    {% set print_width    = num_raft_lines * spacing_raft %}
    # adjust print height to align with the band grid
    {% set band_height      = lines_per_band * line_width + (lines_per_band - 1) * spacing_line + spacing_band %}
    {% set bands_per_height = (([print_size, max_y]|min  - spacing_purge - 2 * line_width + spacing_band) / band_height)|round(0, 'floor')|int %}
    {% set num_bands        = [num_bands, bands_per_height]|min %}  
    {% set print_height     = num_bands * band_height - spacing_band + spacing_purge +  2 * line_width %}
    # adjust slow and fast line lengths to align with raft grid
    {% set slow_line_length = ((print_width * (1 - fast_line_ratio_percent / 100) / 2) / spacing_raft)|round * spacing_raft + spacing_raft / 2 %}  # ends between raft lines
    {% set fast_line_length = print_width - slow_line_length * 2 %}
    {% set thick_raft_num1 = (slow_line_length / spacing_raft)|round|int %}
    {% set thick_raft_num2  = num_raft_lines - thick_raft_num1 + 1 %}
    # find start position
    {% set x_start = max_x / 2 - print_width  / 2 %}
    {% set y_start = max_y / 2 - print_height / 2 %}

    {action_respond_info("")}
    {action_respond_info("Starting Pressure Advance calibration print.")}
    {action_respond_info("")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button once the print starts exhibiting PA values that are obviously too high.")}
    {action_respond_info("")}
    {action_respond_info("PA of first band: %.4f" % pa_start)}
    {action_respond_info("PA of last band: %.4f" % (pa_start + ((num_bands - 1) * pa_increment)))}
    {action_respond_info("PA increment per band: %.4f" % pa_increment)}
    {action_respond_info("Number of bands: %d" % num_bands)}
    {action_respond_info("")}
    {action_respond_info("Inspect the printed model. "
      "Look at the top and bottom lines in each band, on the right side of the two vertical raft bars (where the print speeds change). "
      "Find the highest band from the bottom where the lines at its top still resemble the lines at its bottom, with no visible extrusion width irregularities. "
      "Your final Pressure Advance value would then be:"
    )}
    {action_respond_info("")}
    {action_respond_info("Assuming that first band_number is 0")}
    {action_respond_info("PA = %.4f + (%.4f * band_number)" % (pa_start, pa_increment))}
    {action_respond_info("")}
    {action_respond_info("Update your [extruder] config section and set \"pressure_advance\" to the value you calculated.")}
    {action_respond_info("")}

    # The printed model should be inspected by 
# 
# Then the pressure advance value is calculated as follows:
#    PA = START + (INCREMENT * band_number)
# Which in case of using default values, would be:
#    PA = 0.01 + (0.002 * band_number)
#

    SAVE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION
    {% set pa_saved = printer.configfile.settings['extruder'].pressure_advance %}
    SET_PRESSURE_ADVANCE ADVANCE={pa_start}  # start with a given PA

    #
    # set extrude_factor to 1 
    #
    M221 S100

    #
    # purging before raft
    #
    M117 Priming
    G90  # absolute coords
    G0 X{x_start} Y{y_start} Z{line_height} F{feedrate_travel}  # move to start position
    G91  # relative positioning
    G1 E{initial_purge} F{5 * 60}  # extrude at ~12mm3/sec
    G1 X{print_width}  E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line
    G1 Y{line_width}   E{line_width * e_per_mm}  F{feedrate_raft / 2}  # move to next line
    G1 X-{print_width} E{print_width * e_per_mm} F{feedrate_raft / 2}  # print prime line

    #
    # print the raft
    #
    {% if do_raft == 1 %}
      G0 F{feedrate_raft} # set print speed

      {% for curr_raft_line in range(1, num_raft_lines + 2) %} # rafts need to be on both sides
          # see if we need to print thick raft on slow/fast line boundary
          {% if curr_raft_line == thick_raft_num1 or curr_raft_line == thick_raft_num2 %}
              G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
              G1 Y{loop.cycle(-1.0, 1.0) * print_height} E{print_height * e_per_mm}
              G1 X{line_width} E{line_width * e_per_mm}  
          {% endif %}

          G1 Y{loop.cycle(1.0, -1.0) * print_height} E{print_height * e_per_mm} # print the vertical raft line

          # move over to next column
          {% if not loop.last %}
            {% set horizontal_move = spacing_raft - (2 * line_width if curr_raft_line == thick_raft_num1 - 1 or curr_raft_line == thick_raft_num2 - 1 else 0) %}
            G1 X{horizontal_move} E{horizontal_move * e_per_mm}  
          {% endif %}
      {% endfor %}

      G1 E-{retract_length} F{feedrate_retract}  # retract
      G0 Z{z_hop_height} F{feedrate_z}           # z-hop
    {% endif %}

    #
    # print the bands
    #
    M117 Printing bands
    G90  # absolute coords
    G0 X{x_start} Y{y_start + 2 * line_width + spacing_purge} F{feedrate_travel}  # move to XY start position
    G0 Z{line_height + (line_height if do_raft == 1 else 0)} F{feedrate_z}        # move to Z start position
    G91  # relative positioning
    G1 E{retract_length} F{feedrate_retract}  # unretract

    # print bands
    {% for curr_band_num in range(0, num_bands ) %}
      {% set outer_loop = loop %}

      {% set curr_pa_value = pa_start + curr_band_num * pa_increment %}
      SET_PRESSURE_ADVANCE ADVANCE={curr_pa_value}  # set PA
      M117 Band {curr_band_num} PA {curr_pa_value|round(4)}

      # print control lines
      {% for _ in range(num_lines_control) %}
        G1 X{print_width} E{print_width * e_per_mm * e_multiplier} F{feedrate_control} # print line

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        G0 X-{print_width} Y{spacing_line + line_width} F{feedrate_travel}  # move to start of next line

        G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
        G1 E{retract_length} F{feedrate_retract}  # unretract
      {% endfor %}

      # print test lines
      {% for _ in range(num_lines_test) %}
        {% for data in [{'mm': slow_line_length, 'f': feedrate_outer}, {'mm': fast_line_length, 'f': feedrate_inner}, {'mm': slow_line_length, 'f': feedrate_outer}] %}
          G1 X{data.mm} E{data.mm * e_per_mm * e_multiplier} F{data.f} # print line
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract}  # retract
        G0 Z{z_hop_height} F{feedrate_z}           # z-hop

        {% if not (outer_loop.last and loop.last) %}
          G0 X-{print_width} Y{(spacing_line if not loop.last else spacing_band) + line_width} F{feedrate_travel}  # move to start of next line
          G0 Z-{z_hop_height} F{feedrate_z}         # unz-hop
          G1 E{retract_length} F{feedrate_retract}  # unretract
        {% endif %}
      {% endfor %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}  # retract
    G0 Z20 F{feedrate_z}  # up
    G0 X-{print_width / 2} Y{[50, max_y - (y_start + print_height)]|min} F{feedrate_travel}  # center back

    M117  # clear the LCD
    SET_PRESSURE_ADVANCE ADVANCE={pa_saved}  # restore original PA
    RESTORE_GCODE_STATE NAME=STATE_PRESSURE_ADVANCE_CALIBRATION


    #########################################
    ###### FLOW MULTIPLIER CALIBRATION ######
    #########################################
# Written by Frix_x#0161 #
# @version: 1.6

# CHANGELOG:
#   v1.6: directly added the [gcode_arcs] definition in this file to simplify installation
#   v1.5: moved the install notes into a proper markdown file in: docs > features > flow_calibration.md
#   v1.4: fix issue when extrude_factor is != 1
#   v1.3: fix the logging
#   v1.2: fix for those using absolute extrusion that leads to an error
#   v1.1: added part cooling fan control and some speed optimizations
#   v1.0: first flow calibration macro

# -------------------------------------------------------------------------------------------------------------------------
# If you want to use it into your own config, please install it as a standalone macro as described in the
# installation section of this file: docs > features > flow_calibration.md
# -------------------------------------------------------------------------------------------------------------------------

### What is it ? ###
# The main reason for this set of macros is to get a filament and slicer agnostic way to calibrate the flow extrusion multiplier.
# The goal is to make it easy to set, share and use it.

# This macro is parametric and most of the values can be adjusted with their respective input parameters.
# It can be called without any parameters - in which case the default values would be used - or with any combination of parameters as desired.

# Feel free to ping me on Discord (Frix_x#0161) if you need help or have any comments to improve it :)


# ===========================================================================================================
# DO NOT MODIFY THOSE VARIABLES (they are used internaly by the flow calibration macro)
[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness: 0.0
variable_last_evalue: 0.0
gcode:

[gcode_arcs]
resolution: 0.1

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description: Print a small tower to calibrate the extrusion flow multiplier by measuring the shell
gcode:
    #
    # PARAMETERS
    #
    {% set do_raft = params.DO_RAFT|default(1)|int %} # whether to print a raft or not
    {% set do_retract = params.DO_RECTRACT|default(0)|int %} # whether to enable retract/unrectract on travel moves
    {% set print_size = params.PRINT_SIZE|default(40)|int %} # size of the printed object on the build plate
    {% set print_height = params.HEIGHT|default(15)|int %} # height of the printed object
    {% set corner_radius = params.CORNER_RADIUS|default(8)|int %} # radius of the corners to smooth the shell and toolpath
    {% set number_of_perimeters = params.PERIMETERS|default(2)|int %} # number of perimeters to print the shell
    {% set fan_speed = params.FAN_SPEED|default(20)|int %} # part cooling fan speed in percent (0-100)

    {% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %} # extrusion multiplier for the shell
    {% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %} # filament diameter
    {% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %} # extrusion width goal for one line
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %} # layer height for the print

    {% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %} # how much to retract when traveling between print moves
    {% set initial_purge = params.PURGE_MM|default(1)|int %} # mm of filament to purge before printing. set to 0 to disable
    {% set z_hop_height  = 2 * layer_height %}

    {% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %} # print feedrate
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate between print moves
    {% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %} # print feedrate for printing raft
    {% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %} # z axis travel feedrate
    {% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %} # retract and deretract feedrate

    #
    # COMPUTED VALUES
    #
    {% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %} # computed E factor (similar to Slic3r/PrusaSlicer/SuperSlicer)
    {% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %} # line spacing during the print
    {% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %} # theoric shell thickness

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set x_start = max_x / 2 - print_size / 2 %}
    {% set y_start = max_y / 2 - print_size / 2 %}
    {% set x_end = x_start + print_size %}
    {% set y_end = y_start + print_size %}

    {% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
    {% set raft_size = num_raft_lines * spacing %}

    #
    # STARTING...
    #
    {action_respond_info("")}
    {action_respond_info("Starting extrusion flow calibration print")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}
    {action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}
    {action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}
    {action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}
    {action_respond_info("")}
    {action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}
    {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION

    #
    # set variables for later computation
    #
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}

    #
    # purging before raft
    #
    G90
    M83
    G92 E0.0
    G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel} # move at the start position to do a purge line

    G91 # use relative coordinates for the prime line
    G1 E{initial_purge} F{5 * 60}
    G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2} # print prime line
    G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2} # move to next line
    G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2} # print second prime line

    G1 E-{retract_length} F{feedrate_retract} # retract
    G0 Z{z_hop_height} F{feedrate_z} # z-hop

    G90 # back to absolute coordinates
    G0 X{x_start} Y{y_start} F{feedrate_travel} # move to start position
    G1 Z{layer_height} F{feedrate_z} # move to print height
    G1 E{retract_length} F{feedrate_retract} # unretract

    # set extrude_factor
    M221 S{e_multiplier * 100}

    #
    # print the raft
    #
    {% if do_raft == 1 %}
        G91 # use relative coordinates for the raft
        {% for curr_raft_line in range(1, num_raft_lines + 2) %}
            # print a raft line with alternating direction
            G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}

            # spacing move
            {% if not loop.last %}
                G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
            {% endif %}
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract} # retract
        G0 Z{z_hop_height} F{feedrate_z} # z-hop
        G90 # back to absolute coordinates
    {% endif %}

    #
    # print the shell
    #
    G90
    M106 S{fan_speed * 255 / 100}

    # for each layer
    {% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
        G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel} # move to XY start position
        G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z} # move to Z start position

        # print one layer of the shell (in a for loop to do all the perimeters of one layer)
        {% for perim_num in range(number_of_perimeters) %}
            # compute values for the current perimeter (offset and radius)
            {% set perim_offset = perim_num * spacing %}
            {% set perim_radius = corner_radius - (perim_num * spacing) %}
            
            # start position of the current perimeter
            G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
            {% if do_retract == 1 %}
                G1 E{retract_length} F{feedrate_retract} # unretract
            {% endif %}

            # print the perimeter using the offset and radius computed
            G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}

            {% if do_retract == 1 %}
                G1 E-{retract_length} F{feedrate_retract} # retract
            {% endif %}
        {% endfor %}

        {% if do_retract == 1 %}
            G91
            G0 Z{z_hop_height} F{feedrate_z}
            G90 
        {% endif %}
    {% endfor %}

    #
    # retract and move away
    #
    G1 E-{retract_length} F{feedrate_retract}
    G91
    G0 Z20 F{feedrate_travel}

    RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION


[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description: Compute a new flow multiplier by using the measured shell thickness on the calibration print
gcode:
    {% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %} # extrusion multiplier used for the calibration print
    {% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %} # theorical shell thickness
    {% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %} # measured shell thickness on the calibration print

    # if there is no OLD_EXTRUSION_MULTIPLIER passed as param, get the one from the last print calib run
    {% if evalue == 0.0 %}
        {% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
        
        # then, if there is also no evalue saved from the last run, alert user
        {% if last_evalue == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_evalue = last_evalue %}
            {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
        {% endif %}
    {% else %}
        {% set final_evalue = evalue %}
        {action_respond_info("Using OLD_EXTRUSION_MULTIPLIER: %.3f" % final_evalue)}
    {% endif %}

    # similarly, if there is no THEORICAL_THICKNESS passed as param, get the one from the last print calib run
    {% if theorical_thickness == 0.0 %}
        {% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}

        # then, if there is also no evalue saved from the last run, alert user
        {% if last_shell_thickness == 0.0 %}
            {action_respond_info("It seems that no calibration print was run prior to this (or a restart of Klipper occured).")}
            {action_respond_info("You can still manually use it by calling again this macro like that:")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("not enough data to perform the computation of the new flow !")}
        {% else %}
            {% set final_theorical_thickness = last_shell_thickness %}
            {action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
        {% endif %}
    {% else %}
        {% set final_theorical_thickness = theorical_thickness %}
        {action_respond_info("Using THEORICAL_THICKNESS: %.3f" % final_theorical_thickness)}
    {% endif %}

    # use the measured thickness from the user to compute a new flow value
    {% if measured_thickness == 0.0 %}
        {action_respond_info("You must use a caliper or micrometer to measure the calibration print shell thickness and call this macro with the measured value !!!")}
        {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
        {action_raise_error("not enough data to perform the computation of the new flow !")}
    {% else %}
        {% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
        {action_respond_info("NEW COMPUTED FLOW VALUE: %.3f" % new_evalue)}
        {action_respond_info("Use this new value as extrusion multiplier in your slicer of choice")}
        {action_respond_info("")}
    {% endif %}

##########################################################################
#                               LED Macros
##########################################################################

#  STOP_LED_EFFECTS
#  SET_LED_EFFECT effect=

[gcode_macro led_homing]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=loading_logo
 SET_LED_EFFECT EFFECT=loading_nozzle
 #SET_LED_EFFECT EFFECT=loading_fan
 SET_LED_EFFECT EFFECT=case_homing

[gcode_macro led_idle_startup]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=logo_idle

[gcode_macro led_ready]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_ready
 SET_LED_EFFECT EFFECT=led_nozzle_initial
 #SET_LED_EFFECT EFFECT=fan_nozzle_initial
 SET_LED_EFFECT EFFECT=idle_on2
 

[gcode_macro led_qgl]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_qgl
 SET_LED_EFFECT EFFECT=led_qgl_nozzle
 #SET_LED_EFFECT EFFECT=led_qgl_fan
 SET_LED_EFFECT EFFECT=case_qgl

[gcode_macro led_calibrate_z]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_calibration_z
 SET_LED_EFFECT EFFECT=led_calibration_z_nozzle
 SET_LED_EFFECT EFFECT=case_calibrating_z_left
 SET_LED_EFFECT EFFECT=case_calibrating_z_right

[gcode_macro led_bed_mesh]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_bed_mesh_calibrate
 SET_LED_EFFECT EFFECT=led_bed_mesh_nozzle
#SET_LED_EFFECT EFFECT=led_bed_mesh_fan
 SET_LED_EFFECT EFFECT=case_meshing

[gcode_macro led_clean]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_clean
 SET_LED_EFFECT EFFECT=led_clean_nozzle
 SET_LED_EFFECT EFFECT=case_cleaning

[gcode_macro led_print]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=led_start_print
 SET_LED_EFFECT EFFECT=led_nozzle_print
 SET_LED_EFFECT EFFECT=idle_on
 #SET_LED_EFFECT EFFECT=fan_epilepsie

[gcode_macro led_busy]
gcode:
 STOP_LED_EFFECTS
 SET_LED_EFFECT EFFECT=epilepsie
 SET_LED_EFFECT EFFECT=case_busy

# [gcode_macro fan_chase]
# gcode:
#  STOP_LED_EFFECTS
#  SET_LED_EFFECT EFFECT=fan_chase

#[gcode_macro fan_epilepsie]
#gcode:
 #STOP_LED_EFFECTS
 #SET_LED_EFFECT EFFECT=fan_epilepsie

#[gcode_macro fan_strobe]
#STOP_LED_EFFECTS
 #SET_LED_EFFECT EFFECT=fan_strobe

#led_effect fan_epilepsie
 
#led_effect fan_chase

##########################################################################
#                             Chanber LEDs
##########################################################################

[gcode_macro CHAMBER_LED_ON]
gcode:
  STOP_LED_EFFECTS
  SET_LED LED=chamber RED=1 GREEN=1 BLUE=1 WHITE=1

[gcode_macro CHAMBER_LED_OFF]
gcode:
  STOP_LED_EFFECTS
  SET_LED LED=chamber RED=0 GREEN=0 BLUE=0 WHITE=0

[gcode_macro chamber_test]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_epilepsie

[gcode_macro chamber_red]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_on_red

[gcode_macro case_loading]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_loading

[gcode_macro led_case_heating]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_heating_left
  SET_LED_EFFECT EFFECT=case_heating_right

[gcode_macro case_colortest]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_colortest

[gcode_macro case_bedmesh]
gcode:
  STOP_LED_EFFECTS
  SET_LED_EFFECT EFFECT=case_meshing



##########################################################################################
                             #Bed_Temp_LED
##########################################################################################

[gcode_macro PreheatBed]
gcode:
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=115
  CHAMBER_LED_OFF
  SET_TEMPERATURE_LED SENSOR="temperature_sensor chamber" LED=chamber


[gcode_macro SET_TEMPERATURE_LED]
description: Set one or more neopixels to track a temperature
gcode:
  {% set sensor = params.SENSOR|default('temperature_sensor chamber') %}
  {% set cool_temp = params.COOL_TEMP|default(22.0)|float %}
  {% set hot_temp = params.HOT_TEMP|default(50)|float %}
  {% set brightness = params.BRIGHTNESS|default(1.0)|float %}
  {% set led = params.LED %}
  {% set index = params.INDEX %}
  SET_LED_TEMPLATE LED={led}{% if index is defined %} INDEX={index}{% endif %} TEMPLATE=temperature_color param_sensor="'{sensor}'" param_cool_temp={cool_temp} param_hot_temp={hot_temp} param_brightness={brightness}


[gcode_macro CLEAR_TEMPERATURE_LED]
description: Set one or more neopixels to stop tracking a temperature and return to normal operation
gcode:
  {% set led = params.LED %}
  {% set index = params.INDEX %}
  SET_LED_TEMPLATE LED={led}{% if index is defined %} INDEX={index}{% endif %} TEMPLATE=


[display_template temperature_color]
param_cool_temp: 20
param_hot_temp: 50
param_sensor: 'temperature_sensor chamber'
param_brightness: 1.0

param_gradient: [
  (0.04,0.04,1.00,0.00),
  (0.04,0.04,1.00,0.00),
  (0.04,0.04,1.00,0.00),
  (0.04,0.04,1.00,0.00),
  (0.04,0.04,1.00,0.00),
  (0.05,0.04,1.00,0.00),
  (0.05,0.05,1.00,0.00),
  (0.06,0.06,1.00,0.00),
  (0.07,0.07,1.00,0.00),
  (0.08,0.08,1.00,0.00),
  (0.09,0.10,1.00,0.00),
  (0.11,0.12,1.00,0.00),
  (0.13,0.13,1.00,0.00),
  (0.15,0.15,1.00,0.00),
  (0.16,0.17,0.99,0.00),
  (0.18,0.19,0.99,0.00),
  (0.20,0.21,0.99,0.00),
  (0.23,0.23,0.99,0.00),
  (0.25,0.25,0.98,0.00),
  (0.27,0.27,0.98,0.00),
  (0.29,0.31,0.98,0.00),
  (0.31,0.42,0.96,0.00),
  (0.31,0.50,0.94,0.00),
  (0.31,0.57,0.92,0.00),
  (0.31,0.63,0.89,0.00),
  (0.31,0.69,0.86,0.00),
  (0.31,0.74,0.84,0.00),
  (0.30,0.78,0.80,0.00),
  (0.29,0.82,0.76,0.00),
  (0.27,0.86,0.72,0.00),
  (0.25,0.89,0.66,0.00),
  (0.23,0.93,0.58,0.00),
  (0.20,0.96,0.50,0.00),
  (0.16,0.98,0.41,0.00),
  (0.13,0.99,0.33,0.00),
  (0.09,1.00,0.25,0.00),
  (0.07,1.00,0.14,0.00),
  (0.08,1.00,0.20,0.00),
  (0.07,1.00,0.24,0.00),
  (0.08,1.00,0.25,0.00),
  (0.11,1.00,0.23,0.00),
  (0.10,1.00,0.18,0.00),
  (0.09,1.00,0.14,0.00),
  (0.18,1.00,0.22,0.00),
  (0.27,0.99,0.25,0.00),
  (0.36,0.98,0.28,0.00),
  (0.45,0.97,0.29,0.00),
  (0.53,0.96,0.29,0.00),
  (0.62,0.94,0.27,0.00),
  (0.71,0.92,0.23,0.00),
  (0.79,0.90,0.16,0.00),
  (0.86,0.88,0.10,0.00),
  (0.91,0.86,0.20,0.00),
  (0.95,0.84,0.25,0.00),
  (0.98,0.82,0.27,0.00),
  (0.98,0.82,0.27,0.00),
  (0.98,0.82,0.24,0.00),
  (0.99,0.82,0.16,0.00),
  (1.00,0.82,0.15,0.00),
  (1.00,0.82,0.13,0.00),
  (1.00,0.82,0.10,0.00),
  (1.00,0.83,0.06,0.00),
  (1.00,0.83,0.03,0.00),
  (1.00,0.82,0.09,0.00),
  (1.00,0.81,0.12,0.00),
  (1.00,0.80,0.14,0.00),
  (1.00,0.80,0.16,0.00),
  (1.00,0.78,0.17,0.00),
  (1.00,0.77,0.18,0.00),
  (1.00,0.76,0.18,0.00),
  (1.00,0.75,0.19,0.00),
  (1.00,0.74,0.19,0.00),
  (1.00,0.72,0.20,0.00),
  (1.00,0.71,0.20,0.00),
  (1.00,0.69,0.20,0.00),
  (1.00,0.68,0.20,0.00),
  (1.00,0.66,0.20,0.00),
  (1.00,0.64,0.20,0.00),
  (1.00,0.62,0.19,0.00),
  (1.00,0.60,0.18,0.00),
  (1.00,0.57,0.16,0.00),
  (1.00,0.54,0.15,0.00),
  (1.00,0.51,0.14,0.00),
  (1.00,0.47,0.13,0.00),
  (1.00,0.43,0.11,0.00),
  (1.00,0.39,0.10,0.00),
  (1.00,0.37,0.08,0.00),
  (1.00,0.36,0.06,0.00),
  (1.00,0.33,0.05,0.00),
  (1.00,0.31,0.04,0.00),
  (1.00,0.29,0.02,0.00),
  (1.00,0.27,0.02,0.00),
  (1.00,0.26,0.01,0.00),
  (1.00,0.24,0.01,0.00),
  (1.00,0.22,0.00,0.00),
  (1.00,0.20,0.00,0.00),
  (1.00,0.18,0.00,0.00),
  (1.00,0.16,0.00,0.00),
  (1.00,0.15,0.00,0.00),
  (1.00,0.13,0.00,0.00),
  (1.00,0.11,0.00,0.00),
  (1.00,0.09,0.00,0.00),
  (1.00,0.07,0.00,0.00),
  (1.00,0.05,0.00,0.00),
  (1.00,0.04,0.00,0.00),
  (1.00,0.02,0.00,0.00),
  (1.00,0.01,0.00,0.00),
  (1.00,0.00,0.00,0.00)]
text:
  {% set temp = printer[param_sensor].temperature %}
  {% set steps = param_gradient|length %}
  {% set idx = (((temp - param_cool_temp) / (param_hot_temp - param_cool_temp)) * steps) | int %}
  {% if idx < 0 %} 
    {% set idx = 0 %}
  {% elif idx > steps-1 %}
    {% set idx = steps-1 %}
  {% endif %}
  { param_gradient[idx][0] * param_brightness },{ param_gradient[idx][1] * param_brightness },{ param_gradient[idx][2] * param_brightness },{ param_gradient[idx][3] * param_brightness }